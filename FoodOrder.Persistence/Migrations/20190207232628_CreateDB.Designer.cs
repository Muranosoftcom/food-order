// <auto-generated />
using System;
using FoodOrder.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodOrder.Persistence.Migrations
{
    [DbContext(typeof(FoodOrderDbContext))]
    [Migration("20190207232628_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodOrder.Domain.Entities.DishCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("DishCategories");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.DishItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AvailableUntil");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NegativeReviews");

                    b.Property<int>("PositiveReviews");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("DishItems");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.DishItemToWeekDay", b =>
                {
                    b.Property<int>("DishItemId");

                    b.Property<int>("WeekDayId");

                    b.HasKey("DishItemId", "WeekDayId");

                    b.HasIndex("WeekDayId");

                    b.ToTable("DishItemsToWeekDays");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DishItemId");

                    b.Property<int?>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("DishItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AvailableMoneyToOrder")
                        .HasColumnType("Money");

                    b.Property<bool>("CanMultiSelect");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableMoneyToOrder = 51m,
                            CanMultiSelect = true,
                            Name = "Столовая №1",
                            Position = 0
                        },
                        new
                        {
                            Id = 2,
                            AvailableMoneyToOrder = 0m,
                            CanMultiSelect = false,
                            Name = "ГлаголЪ",
                            Position = 1
                        });
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("WeekDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tue"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thu"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fri"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sat"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sun"
                        });
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.DishCategory", b =>
                {
                    b.HasOne("FoodOrder.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Categories")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.DishItem", b =>
                {
                    b.HasOne("FoodOrder.Domain.Entities.DishCategory", "Category")
                        .WithMany("DishItems")
                        .HasForeignKey("CategoryId");

                    b.HasOne("FoodOrder.Domain.Entities.Supplier", "Supplier")
                        .WithMany("DishItems")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.DishItemToWeekDay", b =>
                {
                    b.HasOne("FoodOrder.Domain.Entities.DishItem", "DishItem")
                        .WithMany("AvailableOn")
                        .HasForeignKey("DishItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FoodOrder.Domain.Entities.WeekDay", "WeekDay")
                        .WithMany("AvailableItems")
                        .HasForeignKey("WeekDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.Order", b =>
                {
                    b.HasOne("FoodOrder.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FoodOrder.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("FoodOrder.Domain.Entities.DishItem", "DishItem")
                        .WithMany()
                        .HasForeignKey("DishItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FoodOrder.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
